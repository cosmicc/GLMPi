#!/usr/local/bin/python3.7m

import psutil
import os
import argparse
from datetime import datetime
from modules.extras import float_trunc_1dec
from modules.rpiboard import is_root

parser = argparse.ArgumentParser()
parser.add_argument('-u', '--userlevel', action='store_true', help='Non-Root user level check')
args = parser.parse_args()

pidfile = '/run/glmpi.pid'

if not os.path.isfile(pidfile):
    print('GLMPi is NOT RUNNING')
else:
    if not is_root():
        print('GLMPi is running')
        exit(0)
    with open(pidfile) as f:
        glmpi_pid = f.readline()

    glmpi_pid = int(glmpi_pid)

    p = psutil.Process(glmpi_pid)


    print(f'GLMPi is {p.status()} [{glmpi_pid}] Nice: {p.nice()} CPU: {p.cpu_percent(interval=1.0)}% MEM: {float_trunc_1dec(p.memory_percent())}% Threads: {p.num_threads()}')
    print(f'Started: {datetime.fromtimestamp(int(p.create_time()))}')
    print(f'CPU Times: {p.cpu_times()}')
    print(f'Memory: {p.virtual_memory()}')
    print('Threads:')
    for each in p.threads():
        print(each)
    print('Connections:')
    print(p.connections())
    print('Open Files:')
    print(p.open_files())

