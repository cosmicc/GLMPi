#!/usr/local/bin/python3.7m

import threading
import argparse
import logging
from socket import gethostname
import subprocess
import netifaces as ni
import signal
from os import stat
from web import create_app
from rpi_ws281x import Color
from modules.processlock import plock
from modules.rpiboard import cpu_temp, Led
from threads.threadqueues import strip_queue, status_queue, alarm_queue
from modules.wifitools import isup_internet, isup_sthub
from threads.statusled import statusled_thread, stled
from threads.ledstrip import ledstrip_thread
from threads.motionpir import motionpir_thread
from threads.presence import pres_thread
from threads.tempsensor import tempsensor_thread
from threads.alarmhandler import alarms_thread
from git import Repo
from configparser import ConfigParser
from datetime import datetime, timedelta
from time import sleep
from modules.extras import str2bool, c2f, End, get_wifi_info

__author__ = "Ian Perry"
__copyright__ = "Copyright 2019, Galaxy Media"
__license__ = "GPL"
__version__ = "0.1.1"
__maintainer__ = "Ian Perry"
__email__ = "ianperry99@gmail.com"
__progname__ = "glmpi"
__description__ = "glmpi daemon service"
__detaildesc__ = "Galaxy Lighting Module for PiZeroW"

host_name = gethostname()
log = logging.getLogger(name=host_name)

config = ConfigParser()
config.read('/etc/glmpi.conf')

logfile = config.get('general', 'logfile')
webserver_port = config.get('general', 'restapi_port')
cputemp_warning = float(config.get('general', 'cputemp_warning'))
cputemp_shutdown = float(config.get('general', 'cputemp_shutdown'))
sthubip = config.get('general', 'smartthings_hub_ip')
loopdelay = int(config.get('general', 'mainloopdelay'))
motion_enabled = str2bool(config.get('motion', 'enabled'))
presence_enabled = str2bool(config.get('presence', 'enabled'))
tempsensor_enabled = str2bool(config.get('temp_sensor', 'enabled'))
temp_units = config.get('general', 'temp_units')
sigwarndb = int(config.get('general', 'wifi_warning_db'))

parser = argparse.ArgumentParser(prog=__progname__)
parser.add_argument('--version', action='version', version='%(prog)s {}'.format(__version__))
parser.add_argument('-c', '--console', action='store_true',
                    help='supress logging output to console. default: error logging')
parser.add_argument('-d', '--debug', action='store_true', help='extra verbose output (debug)')
parser.add_argument('-i', '--info', action='store_true', help='verbose output (info)')
args = parser.parse_args()

if args.debug:
    log.setLevel(logging.DEBUG)
elif args.info:
    log.setLevel(logging.INFO)
else:
    log.setLevel(logging.WARNING)

console_format = logging.Formatter('%(asctime)s.%(msecs)03d %(name)s [%(levelname)s] %(threadName)s : %(message)s', '%Y-%m-%d %H:%M:%S')
log_format = logging.Formatter('%(asctime)s.%(msecs)03d %(name)s [%(levelname)s] %(threadName)s : %(message)s', '%Y-%m-%d %H:%M:%S')

if args.console:
    log_console = logging.StreamHandler()
    log_console.setLevel(logging.DEBUG)
    log.addHandler(log_console)
    log_console.setFormatter(console_format)

log_fileh = logging.FileHandler(logfile)
log_fileh.setLevel(logging.INFO)
log_fileh.setFormatter(log_format)
log.addHandler(log_fileh)

class signal_handling:
  ending = False
  def __init__(self):
    signal.signal(signal.SIGINT, self.exit_gracefully)
    signal.signal(signal.SIGTERM, self.exit_gracefully)

  def exit_gracefully(self,signum, frame):
    self.ending = True


def check_logsize():
    if stat(logfile).st_size > 1000000000:
        log.critical('GLMPi log over 1Gig. Shutting down')
        stled('red', flashes=5, flashrate='fast')
        strip_queue.put((0, 'stripoff'),)
        alarm_queue.put(['GLMPi log over 1Gig. Shutting down'])
        sleep(3)
        exit(3)

def check_cputemp():
    if temp_units == 'C':
        cputemp = cpu_temp()
    elif temp_units == 'F':
        cputemp = c2f(cpu_temp())
    if cputemp > cputemp_shutdown:
        stled('red', flashes=5, flashrate='fast')
        strip_queue.put((0, 'stripoff'),)
        log.critical(f'CPU OVER TEMP - SHUTTING DOWN: {cputemp}*{temp_units} > {cputemp_shutdown}*{temp_units}')
        alarm_queue.put(['CPU temp critical: {cputemp}*{temp_units} > {cputemp_warning}*{temp_units}'])
        sleep(1)
        subprocess.run('shutdown now', stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
        exit(2)
    elif cputemp > cputemp_warning:
        global temptimethrottle
        stled('yellow', flashes=5, flashrate='fast')
        if temptimethrottle > datetime.now()-timedelta(hours=1):
            temptimethrottle = datetime.now()
            log.warning(f'CPU temp warning: {cputemp}*{temp_units} > {cputemp_warning}*{temp_units}')
            alarm_queue.put(['CPU temp warning: {cputemp}*{temp_units} > {cputemp_warning}*{temp_units}'])
    else:
        log.debug(f'CPU temp: {cputemp}*{temp_units}, Warning at {cputemp_warning}*{temp_units}, Shutdown at {cputemp_shutdown}*{temp_units}')

def check_sthub(sthubip):
    if isup_sthub(sthubip):
        #stled('green')
        log.debug('Smartthings Hub is reachable')
        return True
    else:
        global shubtimethrottle
        stled('red', flashes=5)
        if inettimethrottle > datetime.now()-timedelta(hours=1):
            shubtimethrottle = datetime.now()
            log.warning('Smartthings Hub is unreachable')
            alarm_queue.put(['Internet is unreachable'])
        return False

def check_internet():
    if isup_internet():
        stled('green')
        log.debug('Internet is reachable')
        wifiinfo = get_wifi_info()
        alarm_queue.put([f'Low Wireless Signal: {wifiinfo["signal"]} dB / {sigwarndb} dB'])
        if wifiinfo["signal"] < sigwarndb:
            stled('yellow', flashes=5, flashrate='slow')
            if sigtimethrottle > datetime.now()-timedelta(hours=1):
                sigtimethrottle = datetime.now()
                log.warning(f'Low Wireless signal: {wifiinfo["signal"]} dB / {sigwarndb} dB')
                alarm_queue.put([f'Low Wireless Signal: {wifiinfo["signal"]} dB / {sigwarndb} dB'])
        return True
    else:
        global inettimethrottle
        stled('red', flashes=5, flashrate='slow')
        if inettimethrottle > datetime.now()-timedelta(hours=1):
            inettimethrottle = datetime.now()
            log.warning('Internet is unreachable')
            alarm_queue.put(['Internet is unreachable'])
        return False


def get_ip_address():
    return ni.ifaddresses('wlan0')[ni.AF_INET][0]['addr']


def gitupdatecheck():
    repo = Repo('/opt/GLMPi')
    origin = repo.remotes.origin
    origin.fetch()
    if repo.head.commit != origin.refs[0].commit:
        stled('magenta')
        log.warning(f'New GLMPi version found on repo. updating and restarting...')
        origin.pull()
        subprocess.run('systemctl restart glmpi', stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)

pl = plock()
pl.lock()

temptimethrottle = datetime.now()-timedelta(hours=1)
inettimethrottle = datetime.now()-timedelta(hours=1)
shubtimethrottle = datetime.now()-timedelta(hours=1)
sigtimethrottle = datetime.now()-timedelta(hours=1)


def main():
    global temptimethrottle
    global inettimethrottle
    global shubtimethrottle
    def checkthreads():
        if not status_thread.is_alive():
            End('Status Led thread has failed')
        if not alarm_thread.is_alive():
            End('Alarm Handler thread has failed')
        if not strip_thread.is_alive():
            End('Led Strip thread has failed')
        if not webserver.is_alive():
            End('Web server thread has failed')
        if motion_enabled and not motion_thread.is_alive():
            End('Motion Detection thread has failed')
        if tempsensor_enabled and not temp_thread.is_alive():
            End('Temp Sensor thread has failed')
        if presence_enabled and not presence_thread.is_alive():
            End('Presence thread has failed')

    log.info(f'>>> Galaxy Lighting Module Pi daemon is starting on {host_name}')
    glmpi_process = signal_handling()

    status_thread = threading.Thread(name='statusled_thread', target=statusled_thread, daemon = True)
    status_thread.start()

    log.debug('Shutting off on board pi status led')
    boardled = Led('status')
    boardled.ledoff()

    alarm_thread = threading.Thread(name='alarm_thread', target=alarms_thread, daemon = True)
    alarm_thread.start()

    check_cputemp()
    check_logsize()

    if check_internet():
        gitupdatecheck()

    strip_thread = threading.Thread(name='ledstrip_thread', target=ledstrip_thread, daemon = True)
    strip_thread.start()

    check_sthub(sthubip)

    sleep(1)

    host_ip = get_ip_address()
    log.info(f'Starting RestAPI Server on IP: {host_ip} PORT: {webserver_port}')
    try:
        app = create_app('config.BaseConfig')
        webserver = threading.Thread(name='webserver', target=app.run, kwargs={'host': host_ip, 'port': webserver_port}, daemon = True)
        webserver.start()
    except:
        log.critical(f'RestAPI Server failed to start with IP:{host_ip} PORT:{webserver_port}', exc_info=True)
        stled('red', flashes=10, flashrate='fast')

    if motion_enabled:
        motion_thread = threading.Thread(name='motion_thread', target=motionpir_thread, daemon = True)
        motion_thread.start()

    if tempsensor_enabled:
        temp_thread = threading.Thread(name='tempsensor_thread', target=tempsensor_thread, daemon = True)
        temp_thread.start()

    if presence_enabled:
        presence_thread = threading.Thread(name='presence_thread', target=pres_thread, daemon = True)
        presence_thread.start()

    fivemin_timer = int(datetime.now().timestamp())
    onemin_timer = int(datetime.now().timestamp())

    while not glmpi_process.ending:
        try:
            checkthreads()
            if onemin_timer+60 < int(datetime.now().timestamp()):
                onemin_timer = int(datetime.now().timestamp())
                check_cputemp()
                check_sthub(sthubip)
                check_logsize()
            if fivemin_timer+300 < int(datetime.now().timestamp()):
                fivemin_timer = int(datetime.now().timestamp())
                if check_internet():
                    gitupdatecheck()
            sleep(loopdelay)
        except KeyboardInterrupt:
            End('KeyboardInterrupt', alarm=False)
        except:
            log.critical(f'Exception in Main Thread', exc_info=True)
            End('Exception in MainThread')

    End('SIGHUP received', alarm=False)

if __name__ == '__main__':
    main()
