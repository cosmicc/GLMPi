#!/usr/local/bin/python3.7m

import sys
import threading
import argparse
from loguru import logger as log
from socket import gethostname
import subprocess
import signal
from os import stat, statvfs, nice
from web import create_app
from modules.processlock import plock
from modules.rpiboard import cpu_temp, Led
from threads.threadqueues import strip_queue, alarm_queue
from modules.wifitools import isup_internet, isup_sthub
from threads.statusled import statusled_thread, stled
from threads.ledstrip import ledstrip_thread
from threads.motionpir import motionpir_thread
from threads.presence import pres_thread
from threads.sensors import tempsensor_thread
from threads.alarmhandler import alarms_thread
from threads.irreader import irreader_thread
from threads.mastercontroller import mastercontroller_thread
from threads.netdiscover import discovery_thread, discovery
from git import Repo
from configparser import ConfigParser
from datetime import datetime, timedelta
from time import sleep
import schedule
from modules.extras import str2bool, c2f, End, get_wifi_info, secupdates

__author__ = "Ian Perry"
__copyright__ = "Copyright 2019, Galaxy Media"
__license__ = "GPLv3"
__version__ = "0.1.2"
__maintainer__ = "Ian Perry"
__email__ = "ianperry99@gmail.com"
__progname__ = "glmpi"
__description__ = "glmpi daemon service"
__detaildesc__ = "Galaxy Lighting Module for PiZeroW"

host_name = gethostname()

config = ConfigParser()
config.read('/etc/glmpi.conf')

logfile = config.get('general', 'logfile')
logjson = config.get('general', 'logjson')
webserver_port = config.get('general', 'restapi_port')
cputemp_warning = float(config.get('general', 'cputemp_warning'))
cputemp_shutdown = float(config.get('general', 'cputemp_shutdown'))
sthubip = config.get('general', 'smartthings_hub_ip')
loopdelay = int(config.get('general', 'mainloopdelay'))
motion_enabled = str2bool(config.get('motion', 'enabled'))
presence_enabled = str2bool(config.get('presence', 'enabled'))
tempsensor_enabled = str2bool(config.get('temp_sensor', 'enabled'))
temp_units = config.get('general', 'temp_units')
sigwarndb = int(config.get('general', 'wifi_warning_db'))
gitbranch = config.get('general', 'gitbranch')
ir_enabled = str2bool(config.get('irreader', 'enabled'))
master_enabled = str2bool(config.get('master_controller', 'enabled'))
master_req_secs = int(config.get('network_discovery', 'master_req_delay'))

parser = argparse.ArgumentParser(prog=__progname__)
parser.add_argument('--version', action='version', version='%(prog)s {}'.format(__version__))
parser.add_argument('-c', '--console', action='store_true',
                    help='supress logging output to console. default: error logging')
parser.add_argument('-d', '--debug', action='store_true', help='extra verbose output (debug)')
parser.add_argument('-i', '--info', action='store_true', help='verbose output (info)')
args = parser.parse_args()

if args.debug:
    loglevel = "DEBUG"
elif args.info:
    loglevel = "INFO"
else:
    loglevel = "WARNING"

if args.console:
    log.configure(
        handlers=[dict(sink=sys.stdout, level=loglevel, backtrace=True, format='<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>'),
                  dict(sink=logfile, level="ERROR", enqueue=True, serialize=False, rotation="1 MB", retention="30 days", compression="gz"),
                  dict(sink=logjson, level="ERROR", enqueue=True, serialize=True, rotation="100 KB", retention="1 days")],
        levels=[dict(name="STARTUP", no=38, icon="¤", color="<yellow>")], extra={"common_to_all": "default"}, activation=[("my_module.secret", False), ("another_library.module", True)])
else:
    log.configure(
        handlers=[dict(sink=sys.stderr, level="CRITICAL", backtrace=True, format='<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>'),
                  dict(sink=logfile, level="ERROR", enqueue=True, serialize=False, rotation="1 MB", retention="30 days", compression="gz"),
                  dict(sink=logjson, level="ERROR", enqueue=True, serialize=True, rotation="100 KB", retention="1 days")],
        levels=[dict(name="STARTUP", no=38, icon="¤", color="<yellow>")], extra={"common_to_all": "default"}, activation=[("my_module.secret", False), ("another_library.module", True)])


class signal_handling:
    ending = False

    def __init__(self):
        signal.signal(signal.SIGINT, self.exit_gracefully)
        signal.signal(signal.SIGTERM, self.exit_gracefully)

    def exit_gracefully(self, signum, frame):
        self.ending = True


def check_storagespace():
    def exitout(drive):
        log.critical('Storage {drive} is under 50M. Shutting down')
        stled('red', flashes=5, flashrate='fast')
        strip_queue.put((0, 'stripoff'),)
        alarm_queue.put(['Storage {drive} is under 50M. Shutting down'])
        sleep(3)
        exit(3)
    part1 = statvfs('/')
    part2 = statvfs('/var/opt')
    part3 = statvfs('/opt')
    if part1.f_frsize * part1.f_bavail / 1024 < 51200:
        exitout('/')
    if part2.f_frsize * part2.f_bavail / 1024 < 51200:
        exitout('/var/opt')
    if part3.f_frsize * part3.f_bavail / 1024 < 51200:
        exitout('/opt')


def check_logsize():
    if stat(logfile).st_size > 1000000000:
        log.critical('GLMPi log over 1Gig. Shutting down')
        stled('red', flashes=5, flashrate='fast')
        strip_queue.put((0, 'stripoff'),)
        alarm_queue.put(['GLMPi log over 1Gig. Shutting down'])
        sleep(3)
        exit(3)


def check_cputemp():
    if temp_units == 'C':
        cputemp = cpu_temp()
    elif temp_units == 'F':
        cputemp = c2f(cpu_temp())
    if cputemp > cputemp_shutdown:
        stled('red', flashes=5, flashrate='fast')
        strip_queue.put((0, 'stripoff'),)
        log.critical(f'CPU OVER TEMP - SHUTTING DOWN: {cputemp}*{temp_units} > {cputemp_shutdown}*{temp_units}')
        alarm_queue.put(['CPU temp critical: {cputemp}*{temp_units} > {cputemp_warning}*{temp_units}'])
        sleep(1)
        subprocess.run('shutdown now', stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
        exit(2)
    elif cputemp > cputemp_warning:
        global temptimethrottle
        stled('yellow', flashes=5, flashrate='fast')
        if temptimethrottle < datetime.now() - timedelta(hours=1):
            temptimethrottle = datetime.now()
            log.warning(f'CPU temp warning: {cputemp}*{temp_units} > {cputemp_warning}*{temp_units}')
            alarm_queue.put(['CPU temp warning: {cputemp}*{temp_units} > {cputemp_warning}*{temp_units}'])
    else:
        log.debug(f'CPU temp: {cputemp}*{temp_units}, Warning at {cputemp_warning}*{temp_units}, Shutdown at {cputemp_shutdown}*{temp_units}')


def check_sthub():
    if isup_sthub(sthubip):
        stled('green')
        log.debug('Smartthings Hub is reachable')
        return True
    else:
        global shubtimethrottle
        stled('orange', flashes=5)
        if inettimethrottle < datetime.now() - timedelta(hours=1):
            shubtimethrottle = datetime.now()
            log.warning('Smartthings Hub is unreachable')
            alarm_queue.put(['Internet is unreachable'])
        return False


def check_internet():
    global sigtimethrottle
    if isup_internet():
        stled('green')
        log.debug('Internet is reachable')
        wifiinfo = get_wifi_info()
        if wifiinfo["signal"] < sigwarndb:
            stled('yellow', flashes=5, flashrate='slow')
            if sigtimethrottle < datetime.now() - timedelta(hours=1):
                sigtimethrottle = datetime.now()
                log.warning(f'Low Wireless signal: {wifiinfo["signal"]} dB / {sigwarndb} dB')
                alarm_queue.put([f'Low Wireless Signal: {wifiinfo["signal"]} dB / {sigwarndb} dB'])
        return True
    else:
        global inettimethrottle
        stled('orange', flashes=5, flashrate='slow')
        log.debug('Internet is unreachable')
        if inettimethrottle > datetime.now() - timedelta(hours=1):
            inettimethrottle = datetime.now()
            log.warning('Internet is unreachable')
            alarm_queue.put(['Internet is unreachable'])
        return False


def gitupdatecheck():
    if isup_internet():
        subprocess.run('mount /opt -o remount,rw', stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
        repo = Repo('/opt/GLMPi')
        if repo.active_branch.name != gitbranch:
            if gitbranch not in [h.name for h in repo.heads]:
                # make branch before checkout
                log.warning(f'Git branch {gitbranch} doesnt exist locally, creating')
            log.warning(f'Switching to Git repository: {gitbranch}')
            repo.heads[gitbranch].checkout()

        origin = repo.remotes.origin
        origin.fetch()
        if repo.head.commit != origin.refs[0].commit and repo.active_branch.name == 'production':
            stled('magenta')
            log.warning(f'New GLM version found on repo {gitbranch}. updating and restarting...')
            repo.git.reset('--hard')
            repo.git.clean('-xdf')
            origin.pull()
            subprocess.run('systemctl restart glmpi', stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
        if gitbranch == 'production':
            subprocess.run('mount /opt -o remount,ro', stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)


pl = plock()
pl.lock()

temptimethrottle = datetime.now() - timedelta(hours=2)
inettimethrottle = datetime.now() - timedelta(hours=2)
shubtimethrottle = datetime.now() - timedelta(hours=2)
sigtimethrottle = datetime.now() - timedelta(hours=2)


def main():
    global temptimethrottle
    global inettimethrottle
    global shubtimethrottle

    def checkthreads():
        if not status_thread.is_alive():
            End('Status Led thread has failed')
        if not alarm_thread.is_alive():
            End('Alarm Handler thread has failed')
        if not strip_thread.is_alive():
            End('Led Strip thread has failed')
        if not webserver.is_alive():
            End('Web server thread has failed')
        if motion_enabled and not motion_thread.is_alive():
            End('Motion Detection thread has failed')
        if tempsensor_enabled and not temp_thread.is_alive():
            End('Temp Sensor thread has failed')
        if presence_enabled and not presence_thread.is_alive():
            End('Presence thread has failed')
        if ir_enabled and not ir_thread.is_alive():
            End('IR reciever thread has failed')

    log.log('STARTUP', f'>>> Galaxy Lighting Module Pi daemon is starting on {host_name} <<<')
    glmpi_process = signal_handling()

    log.debug('Setting process niceness to -10')
    nice(-10)

    status_thread = threading.Thread(name='statusled_thread', target=statusled_thread, daemon=True)
    status_thread.start()

    log.debug('Shutting off on board pi status led')
    boardled = Led('status')
    boardled.ledoff()

    alarm_thread = threading.Thread(name='alarm_thread', target=alarms_thread, daemon=True)
    alarm_thread.start()

    check_cputemp()
    check_logsize()

    gitupdatecheck()

    netdiscovery_thread = threading.Thread(name='netdiscovery_thread', target=discovery_thread, daemon=True)
    netdiscovery_thread.start()

    strip_thread = threading.Thread(name='ledstrip_thread', target=ledstrip_thread, daemon=True)
    strip_thread.start()

    check_sthub()

    sleep(1)

    log.info(f'Starting RestAPI Server on PORT: {webserver_port}')
    try:
        app = create_app('config.BaseConfig')
        webserver = threading.Thread(name='webserver', target=app.run, kwargs={'host': '0.0.0.0', 'port': webserver_port}, daemon=True)
        webserver.start()
    except:
        log.critical(f'RestAPI Server failed to start on port:{webserver_port}', exc_info=True)
        stled('red', flashes=10, flashrate='fast')

    if motion_enabled:
        motion_thread = threading.Thread(name='motion_thread', target=motionpir_thread, daemon=True)
        motion_thread.start()

    if tempsensor_enabled:
        temp_thread = threading.Thread(name='tempsensor_thread', target=tempsensor_thread, daemon=True)
        temp_thread.start()

    if presence_enabled:
        presence_thread = threading.Thread(name='presence_thread', target=pres_thread, daemon=True)
        presence_thread.start()

    if master_enabled:
        master_thread = threading.Thread(name='mastercontroller_thread', target=mastercontroller_thread, daemon=True)
        master_thread.start()

    if ir_enabled:
        ir_thread = threading.Thread(name='irreader_thread', target=irreader_thread, daemon=True)
        ir_thread.start()

    schedule.every().hour.do(gitupdatecheck)
    schedule.every(5).minutes.do(check_internet)
    schedule.every().minute.do(check_cputemp)
    schedule.every().minute.do(check_sthub)
    schedule.every().minute.do(check_logsize)
    schedule.every().day.at("04:00").do(secupdates)

    needmaster = False

    if not discovery.is_master and discovery.master == None:
        log.warning(f'No Master. Sending Master request every {master_req_secs} seconds')
        needmaster = True
        disjob = schedule.every(master_req_secs).seconds.do(discovery.master_request)

    while not glmpi_process.ending:
        try:
            if discovery.master != None and needmaster:
                log.info(f'Master {discovery.master} found. calling off search')
                schedule.cancel_job(disjob)
                needmaster = False
            schedule.run_pending()
            checkthreads()
            sleep(loopdelay)
        except KeyboardInterrupt:
            End('KeyboardInterrupt', alarm=False)
            webserver.terminate()
            strip_thread.terminate()
        except:
            log.exception(f'Exception in Main Thread', exc_info=True)
            End('Exception in MainThread')

    End('SIGHUP received', alarm=False)
    webserver.terminate()
    sleep(1)
    strip_thread.terminate()


if __name__ == '__main__':
    main()
